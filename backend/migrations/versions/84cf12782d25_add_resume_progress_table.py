"""add_resume_progress_table

Revision ID: 84cf12782d25
Revises: 0afd2394fed3
Create Date: 2025-10-15 13:37:34.238693

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '84cf12782d25'
down_revision: Union[str, Sequence[str], None] = '0afd2394fed3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create resume_progress table if it doesn't exist
    op.create_table('resume_progress',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('resume_id', sa.Integer(), nullable=True),
        sa.Column('completion_percentage', sa.Float(), nullable=True),
        sa.Column('section_scores', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resume_progress_id'), 'resume_progress', ['id'], unique=False)
    op.create_index(op.f('ix_resume_progress_resume_id'), 'resume_progress', ['resume_id'], unique=False)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('resumes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('resumes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('template', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('personal_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('experience', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('education', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('certifications', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('projects', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('downloads', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ats_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('feedback', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('customization', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('template_name', sa.VARCHAR(), server_default=sa.text("'professional-blue'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='resumes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='resumes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_resumes_user_id'), 'resumes', ['user_id'], unique=False)
    op.create_index(op.f('ix_resumes_updated_at'), 'resumes', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resumes_template_name'), 'resumes', ['template_name'], unique=False)
    op.create_index(op.f('ix_resumes_id'), 'resumes', ['id'], unique=False)
    op.create_index(op.f('ix_resumes_full_name'), 'resumes', ['full_name'], unique=False)
    op.create_index(op.f('ix_resumes_email'), 'resumes', ['email'], unique=False)
    op.create_index(op.f('ix_resumes_created_at'), 'resumes', ['created_at'], unique=False)
    op.create_table('resume_versions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('resume_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('template', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('personal_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('experience', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('education', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('certifications', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('projects', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], name=op.f('resume_versions_resume_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('resume_versions_pkey'))
    )
    op.create_index(op.f('ix_resume_versions_resume_id'), 'resume_versions', ['resume_id'], unique=False)
    op.create_index(op.f('ix_resume_versions_id'), 'resume_versions', ['id'], unique=False)
    op.create_table('share_links',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('resume_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], name=op.f('share_links_resume_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('share_links_pkey'))
    )
    op.create_index(op.f('ix_share_links_token'), 'share_links', ['token'], unique=True)
    op.create_index(op.f('ix_share_links_resume_id'), 'share_links', ['resume_id'], unique=False)
    op.create_index(op.f('ix_share_links_id'), 'share_links', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('oauth_provider', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('oauth_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('reset_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reset_token_expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###
